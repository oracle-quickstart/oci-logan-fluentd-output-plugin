# Four worker set up.
<system>
  workers 4
</system>

# Below prometheus source block will be applicable for all the workers with plugins which support multi-process workers feature.
# For these workers, corresponding port for prometheus will be original port provided ( in this example 24232) + worker_id.
<source>
  @type prometheus
  bind 0.0.0.0
  port 24232
  aggregated_metrics_path /aggregated_metrics
</source>

# work on worker 0 HTTP
<worker 0>
    <source>
      @type http
      port 9880
      bind 0.0.0.0
      tag oci.apacheError
      <parse>
          @type none
      </parse>
    </source>

    <filter oci.**>
    @type record_transformer
    enable_ruby
    <record>
        oci_la_metadata ${{<key1>: <value1>, <key2>:<value2>}}
        oci_la_log_source_name <LOGGING_ANALYTICS_SOURCENAME>
        oci_la_log_group_id <LOGGING_ANALYTICS_LOGGROUP_OCID>
        oci_la_log_path "${record['tailed_path']}"
        tag ${tag}
        worker_id 0
    </record>
    </filter>

    <match oci.**>
        @type oci-logging-analytics
        namespace                   <YOUR_OCI_TENANCY_NAMESPACE>
        # Auth config file details
        config_file_location        ~/.oci/config
        profile_name                DEFAULT
        # Buffer Configuration
        <buffer>
              @type	file
              path	/var/log
              retry_forever	true
              disable_chunk_backup	true
        </buffer>
    </match>
</worker>

# work on worker 1 UDP
<worker 1>
    <source>
        @type udp
        tag oci.audit.log # required
        port 20001               # optional. 5160 by default
        bind 0.0.0.0             # optional. 0.0.0.0 by default
        message_length_limit 1MB # optional. 4096 bytes by default
        <parse>
            @type none
        </parse>
    </source>

    <filter oci.**>
    @type record_transformer
    enable_ruby
    <record>
        oci_la_metadata ${{<key1>: <value1>, <key2>:<value2>}}
        oci_la_log_source_name <LOGGING_ANALYTICS_SOURCENAME>
        oci_la_log_group_id <LOGGING_ANALYTICS_LOGGROUP_OCID>
        oci_la_log_path "${record['tailed_path']}"
        tag ${tag}
        worker_id 1
    </record>
    </filter>

    <match oci.**>
        @type oci-logging-analytics
        namespace                   <YOUR_OCI_TENANCY_NAMESPACE>
        # Auth config file details
        config_file_location        ~/.oci/config
        profile_name                DEFAULT
        # Buffer Configuration
        <buffer>
              @type	file
              path	/var/log
              retry_forever	true
              disable_chunk_backup	true
        </buffer>
    </match>
</worker>

# work on worker 2 TAIL
<worker 2>
    <source>
        @type tail
        @id in_tail_apacheError
        path /var/log/apacheError.log
        pos_file /var/log/fluentd-apacheError.log.pos
        read_from_head true
        path_key tailed_path
        tag oci.apacheError
        <parse>
            @type none
        </parse>
    </source>

# As @tail plugin does not support multi-process workers feature, we need to provide prometheus related source block along with exact port details, as shown below.
    <source>
      @type prometheus
      bind 0.0.0.0
      port 24234
      aggregated_metrics_path /aggregated_metrics
    </source>

    <filter oci.**>
    @type record_transformer
    enable_ruby
    <record>
        oci_la_metadata ${{<key1>: <value1>, <key2>:<value2>}}
        oci_la_log_source_name <LOGGING_ANALYTICS_SOURCENAME>
        oci_la_log_group_id <LOGGING_ANALYTICS_LOGGROUP_OCID>
        oci_la_log_path "${record['tailed_path']}"
        tag ${tag}
        worker_id 0
    </record>
    </filter>

    <match oci.**>
        @type oci-logging-analytics
        namespace                   <YOUR_OCI_TENANCY_NAMESPACE>
        # Auth config file details
        config_file_location        ~/.oci/config
        profile_name                DEFAULT
        # Buffer Configuration
        <buffer>
              @type	file
              path	/var/log
              retry_forever	true
              disable_chunk_backup	true
        </buffer>
    </match>
</worker>

# work on worker 3 TCP with buffer as memory
<worker 3>
    <source>
      @type tcp
      tag oci.apache.kafka # required
      port 5170   # optional. 5170 by default
      bind 0.0.0.0 # optional. 0.0.0.0 by default
      <parse>
        @type none
     </parse>
    </source>

    <filter oci.**>
    @type record_transformer
    enable_ruby
    <record>
        oci_la_metadata ${{<key1>: <value1>, <key2>:<value2>}}
        oci_la_log_source_name <LOGGING_ANALYTICS_SOURCENAME>
        oci_la_log_group_id <LOGGING_ANALYTICS_LOGGROUP_OCID>
        oci_la_log_path "${record['tailed_path']}"
        tag ${tag}
        worker_id 0
    </record>
    </filter>

    <match oci.**>
        @type oci-logging-analytics
        namespace                   <YOUR_OCI_TENANCY_NAMESPACE>
        # Auth config file details
        config_file_location        ~/.oci/config
        profile_name                DEFAULT
        # Buffer Configuration
        <buffer>
              @type	file
              path	/var/log
              retry_forever	true
              disable_chunk_backup	true
        </buffer>
    </match>
</worker>